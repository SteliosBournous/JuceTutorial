/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

// Define Headers
#include "ParameterSlider.h"
#include "PluginProcessor.h"


//==============================================================================
/**
 This is our Editor class so this is a subclass of the juce class AudioProcessorEditor.
 Here the for user-interface(UI) elements live. 
 In order to add any component you should also inherit from a JUCE class UI objects.
 Check Component, Slider, Button (TextButton, ToggleButton), Combobox classes.
 The above classes are responsible for the visualisation of the UI elements.
 
 At the same time when changing the value of a component their listeners receive callbacks for these changes.
 For that reason take a look at Slider::Listener, Button::Listener, Combobox::Listener, etc classes.
 
 At this tutorial we will create:
 - 1 slider: Object of the ParameterSlider class
 - 1 button: Object of the juce ToggleButton class
*/

class DemoPluginAudioProcessorEditor  : public AudioProcessorEditor,
                                        public Button::Listener,
                                        private Timer
{
public:
    DemoPluginAudioProcessorEditor (DemoPluginAudioProcessor&);
    ~DemoPluginAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;
    
    // Some of the parent classes are abstract. So, we have to override them.
    // Override Button::Listener::buttonClicked(Button *button) method to get the callbacks from a button.
    void buttonClicked (Button *button);
    void timerCallback() override;
    
    /*  Also, override the Component::mouseDown(), Component::mouseUp() to send a signal to the processor
        for the events (start and stop) of changing a parameter
     */
    void mouseDown	(const MouseEvent & event) override;
    void mouseUp	(const MouseEvent & event) override;

    void updateMuteButtonText(bool state);
    
private:
    // This reference is provided as a quick way for your editor to
    // access the processor object that created it.
    DemoPluginAudioProcessor& processor;
    
    /*
     Declare our UI objects. These objects are pointers.
     Generally it is better to use the juce ScopedPointer class(check juce documentation) to declare a pointer.
     */
    ScopedPointer<ParameterSlider> gainSlider;
    ScopedPointer<ToggleButton> muteButton;
    
    // General variables
    int compWidth = 100;
    int compHeight = 50;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (DemoPluginAudioProcessorEditor)
};


#endif  // PLUGINEDITOR_H_INCLUDED
